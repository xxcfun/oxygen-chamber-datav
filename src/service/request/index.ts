import axios from 'axios'import type { AxiosInstance } from 'axios'import type { XXRequestInterceptors, XXRequestConfig } from './type'class XXRequest {  instance: AxiosInstance  interceptors?: XXRequestInterceptors  constructor(config: XXRequestConfig) {    // axios实例    this.instance = axios.create(config)    // 保存基本信息    this.interceptors = config.interceptors    // 使用拦截器    // 1.从config中取出的拦截器是对应的实例的拦截器    this.instance.interceptors.request.use(      this.interceptors?.requestInterceptor,      this.interceptors?.requestInterceptorCache    )    this.instance.interceptors.response.use(      this.interceptors?.responseInterceptor,      this.interceptors?.responseInterceptorCahce    )    // 2.添加所有的实例都有的拦截器    this.instance.interceptors.request.use(      (config) => {        return config      },      (error) => {        return error      }    )    this.instance.interceptors.response.use(      (res) => {        const data = res.data        if (data.returnCode === '-1001') {          console.log('请求失败，错误信息')        } else {          return data        }        return res      },      (error) => {        if (error.response.status === 404) {          console.log('404错误，找不到对象')        }        return error      }    )  }  request<T = any>(config: XXRequestConfig<T>): Promise<T> {    return new Promise((resolve) => {      // 1.单个请求对请求config的处理      if (config.interceptors?.requestInterceptor) {        config = config.interceptors.requestInterceptor(config)      }      this.instance        .request<any, T>(config)        .then((res) => {          // 1.单个请求对数据的处理          if (config.interceptors?.responseInterceptor) {            res = config.interceptors.responseInterceptor(res)          }          // 3.将结果resolve返回出去          resolve(res)        })        .catch((error) => {          resolve(error)          return error        })    })  }  get<T = any>(config: XXRequestConfig<T>): Promise<T> {    return this.request<T>({ ...config, method: 'GET' })  }  post<T = any>(config: XXRequestConfig<T>): Promise<T> {    return this.request<T>({ ...config, method: 'POST' })  }  put<T = any>(config: XXRequestConfig<T>): Promise<T> {    return this.request<T>({ ...config, method: 'PUT' })  }  delete<T = any>(config: XXRequestConfig<T>): Promise<T> {    return this.request<T>({ ...config, method: 'DELETE' })  }  patch<T = any>(config: XXRequestConfig<T>): Promise<T> {    return this.request<T>({ ...config, method: 'PATCH' })  }}export default XXRequest